# docker-compose file for the production environment where all components of the project
# are run as services (postgres, redis, django, celery consumer, celery scheduler):
# Note that the production system additionally runs a traefik reverse proxy.
version: '3.8'

services:
  postgres:
    restart: always
    image: postgres:15.2
    networks:
      - overlay
    env_file:
      - ./.env
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - overlay
    volumes:
      - ./redis/data:/var/lib/redis/data

  django:
    restart: always
    image: ${APP_IMAGE}
    networks:
      - overlay
      - web
    env_file:
      - ./.env
    labels:
      - "traefik.enable=true"
      # HTTP Router for Django
      - "traefik.http.routers.django.rule=Host(`mood-diary.sw-os.de`)"
      - "traefik.http.routers.django.entrypoints=http"
      - "traefik.http.routers.django.middlewares=django-https-redirect"
      # Middleware for redirecting HTTP to HTTPS
      - "traefik.http.middlewares.django-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.django-https-redirect.redirectscheme.permanent=true"
      # HTTPS Router for Django
      - "traefik.http.routers.django-secure.rule=Host(`mood-diary.sw-os.de`)"
      - "traefik.http.routers.django-secure.entrypoints=https"
      - "traefik.http.routers.django-secure.tls=true"
      # Load Balancer for Django
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      # Additional labels for automatic Let's Encrypt certificate generation
      # - "traefik.http.routers.django-nginx-secure.tls.certresolver=dnsimple"
      # - "traefik.http.routers.django-nginx-secure.tls.domains[0].main=mood-diary.de"
      # - "traefik.http.routers.django-nginx-secure.tls.domains[0].sans=*.mood-diary.de"

  celery_consumer:
    restart: always
    image: ${APP_IMAGE}
    networks:
      - overlay
    env_file:
      - ./.env
    command: bash scripts/startup_celery_consumer.sh

  celery_beat:
    restart: always
    image: ${APP_IMAGE}
    networks:
      - overlay
    env_file:
      - ./.env
    command: bash scripts/startup_celery_scheduler.sh

  traefik:
      image: traefik:v2.1
      container_name: traefik
      command:
        - --api.debug=true
        - --log.level=DEBUG
        - --providers.docker=true
        - --providers.docker.exposedbydefault=false
        - --providers.docker.network=web
        - --entrypoints.http.address=:80
        - --entrypoints.https.address=:443
        - --providers.file.filename=/etc/traefik/traefik_dynamic_conf.yml # <== Dynamic configuration file
      restart: always
      ports:
        - "80:80"
        - "443:443"
      networks:
        - web
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./traefik_dynamic_conf.yml:/etc/traefik/traefik_dynamic_conf.yml # <== Mount the dynamic config file
        - ./certs/cert.crt:/cert.crt # <== Mount your certificate
        - ./certs/cert.key:/cert.key # <== Mount your key

networks:
  overlay:
  web:
    external: true

# Traefik config with automatic Let's Encrypt certificate generation
#  traefik:
#    image: traefik:v2.1
#    container_name: traefik
#    command:
#      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
#      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
#      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
#      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
#      # - --api.insecure=true
#      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
#      - --log.level=DEBUG # <== Setting the level of the logs from traefik
#      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
#      - --providers.docker=true # <== Enabling docker as the provider for traefik
#      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
#      - --providers.docker.network=web # <== Operate on the docker network named web
#      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
#      - --entrypoints.http.address=:80 # <== Defining an entrypoint for port :80 named web
#      - --entrypoints.https.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
#      ## Certificate Settings (Let's Encrypt) - https://docs.traefik.io/https/acme/#configuration-examples ##
#      - --certificatesresolvers.dnsimple.acme.dnschallenge=true
#      - --certificatesresolvers.dnsimple.acme.dnschallenge.provider=dnsimple
#      - --certificatesresolvers.dnsimple.acme.email=mathis@mood-diary.de # <== Setting email for certs
#      - --certificatesresolvers.dnsimple.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
#      # - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.middlewares.traefik-basic-auth.basicauth.users=$TRAEFIK_AUTH_USER:$TRAEFIK_AUTH_PASSWORD" # <== basic auth access
#      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
#      - "traefik.http.routers.traefik.entrypoints=http"
#      - "traefik.http.routers.traefik.priority=2"
#      - "traefik.http.routers.traefik.rule=Host(`$TRAEFIK_URL`)"
#      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
#      - "traefik.http.routers.traefik-secure.entrypoints=https"
#      - "traefik.http.routers.traefik-secure.priority=2"
#      - "traefik.http.routers.traefik-secure.rule=Host(`$TRAEFIK_URL`)"
#      - "traefik.http.routers.traefik-secure.middlewares=traefik-basic-auth"
#      - "traefik.http.routers.traefik-secure.tls=true"
#      - "traefik.http.routers.traefik-secure.tls.certresolver=dnsimple"
#      - "traefik.http.routers.traefik-secure.service=api@internal"
#    restart: always
#    ports:
#      - 80:80
#      - 443:443
#    networks:
#      - web
#    volumes:
#      - /home/docker/letsencrypt:/letsencrypt # <== Volume for certs (TLS)
#      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
#    environment:
#      DNSIMPLE_OAUTH_TOKEN: ${DNSIMPLE_OAUTH_TOKEN}

#      DNSIMPLE_BASE_URL: ${DNSIMPLE_BASE_URL}
